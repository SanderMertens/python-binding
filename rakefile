require 'rake/clean'

PythonBindingVersion = "0.1.0"
ENV['PYTHON_BINDING_VERSION'] = PythonBindingVersion
Debug = true

cflags = %w(-std=c99 -Wstrict-prototypes -pedantic)

if Debug then
  cflags << "-O0"
end

ENV["CFLAGS"] = cflags.join(" ")

SupportedPythonVersions = %w(3.4 3.5)

def check_python_version_supported?
  python_version = `python --version`
  is_supported = SupportedPythonVersions.map do |v|
    "Python #{v}."
  end.any? do |v|
    python_version.start_with? v
  end
  unless is_supported
    python_version = "< 3.3" if python_version.empty?
    raise "Unsupported Python version: #{python_version}"
  end
end

task :build do
  check_python_version_supported?
  sh 'rm -rf "$HOME/.corto/python-binding/src/"'
  sh 'mkdir -p "$HOME/.corto/python-binding/src/"'
  sh 'cp src/*.h "$HOME/.corto/python-binding/src/"'

  sh "python setup.py build"
  sh "python setup.py sdist"
end

task :rebuild do
  sh "rm -rf build"
  sh "rm -rf dist"
  Rake::Task["build"].invoke
end

task :install do
  check_python_version_supported?
  begin
    sh "pip uninstall --yes cortopy"
  rescue
  end
  sh "pip install dist/cortopy-#{PythonBindingVersion}.tar.gz"
end

task :test do
  check_python_version_supported?
  sh "py.test -vvv test/"
end

task :env do
  {"env34" => "python3.4", "env35" => "python3.5"}.each do |env, python|
    sh "rm -rf #{env}"
    sh "#{python} -m venv #{env}"
    sh "./#{env}/bin/pip install --upgrade pip"
    sh "./#{env}/bin/pip install -r requirements-dev.txt"
  end
end

task :default do
  Rake::Task["build"].invoke
  Rake::Task["install"].invoke
  Rake::Task["test"].invoke
end
